@page "/"

<section>
    <div class="row">
        <div class="col">

            <TabContainer>
                <Tab Text="New action">
                    <div class="bg-secondary pd-medium">
                        <EditForm Model="NewAction">

                            <fieldset id="forms__select">
                                <legend>New action creator</legend>

                                <p class="grouped">
                                    <label for="input_action-type">Action type</label>
                                    <InputSelectEnum id="input_action-type" @bind-Value="NewAction.Type" />

                                    @if (NewAction.Type == ActionType.GoForward || NewAction.Type == ActionType.GoBackward)
                                    {
                                        <label for="input__distance">Distance [cm]</label>
                                        <input type="number" id="input__distance" min="0" @bind-value="NewAction.Distance">
                                    }
                                    else if (NewAction.Type == ActionType.Wait)
                                    {
                                        <label for="input__duration">Duration [ms]</label>
                                        <input type="number" id="input__duration" min="1" @bind-value="NewAction.Duration">
                                    }
                                    else if (NewAction.Type == ActionType.TurnLeft || NewAction.Type == ActionType.TurnRight)
                                    {
                                        <label for="input__angle">Angle [degrees]</label>
                                        <input type="number" id="input__angle" min="0" max="360" @bind-value="NewAction.Angle">
                                    }

                                    <button class="button primary" @onclick="AddAction">Add</button>
                                </p>

                            </fieldset>
                        </EditForm>
                    </div>
                </Tab>

                <Tab Text="Settings">
                    <div class="bg-secondary pd-medium">
                        <EditForm Model="Settings">
                            <fieldset id="forms__input">
                                <legend>Code name</legend>
                                <p>
                                    <label for="input__name">Code name</label>
                                    <input id="input__name" type="text" placeholder="Program" @bind-value="Settings.Name">
                                </p>
                            </fieldset>

                            <fieldset id="forms__select">
                                <legend>Robot configuration</legend>
                                <p class="grouped">
                                    <span>
                                        <label for="input__track-width">Track width [cm]</label>
                                        <input type="number" id="input__track-width" min="0" max="20" @bind-value="Settings.TrackWidth">
                                    </span>

                                    <span>
                                        <label for="input__wheel-diameter-input">Wheel diameter [cm]</label>
                                        <input type="number" id="input__wheel-diameter" min="0" max="5" @bind-value="Settings.WheelDiameter">
                                    </span>

                                    <span>
                                        <label for="input__left-engine">Engines</label>
                                        <InputSelectEnum id="input__left-engine" @bind-Value="Settings.LeftEnginePort" />
                                    </span>

                                    <span>
                                        <label for="input__right-engine">Engines</label>
                                        <InputSelectEnum id="input__right-engine" @bind-Value="Settings.RightEnginePort" />
                                    </span>

                                </p>
                            </fieldset>
                        </EditForm>
                    </div>
                </Tab>

                <Tab Text="Generator">
                    <div class="bg-secondary pd-medium">
                        <div class="row">
                            <div class="col">
                                <button class="button primary outline" @onclick="GenerateCode">Generate</button>
                            </div>
                        </div>
                    </div>
                </Tab>
            </TabContainer>

        </div>
    </div>
</section>

<section>
    <div class="row is-vertical-align">
        <div class="col">
            <h2>Actions</h2>
        </div>
        <div class="col text-right">
            <p><span class="tag tip-tag is-small">TIP</span>Drag &amp; drop to change order</p>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <TabContainer>
                <Tab Text="Actions">
                    <div class="bg-secondary pd-medium ">
                        @if (RobotActions.Count == 0)
                        {
                            <div class="row">
                                <div class="col">
                                    <p class="text-light text-capitalize"><b>No actions</b></p>
                                </div>
                            </div>
                        }
                        else
                        {
                            <Dropzone Items="RobotActions" InstantReplace="true">
                                <RobotActionEntry Action="@context" OnRemoveClick="(item) => RobotActions.Remove(item)" />
                            </Dropzone>
                        }
                    </div>
                </Tab>

                <Tab Text="Route">
                    <div class="bg-secondary pd-medium is-horizontal-align">
                        <BECanvas Width="400" Height="400" @ref="_canvasReference"></BECanvas>
                    </div>
                </Tab>
            </TabContainer>
        </div>
    </div>
</section>

@code
{
    public List<RobotAction> RobotActions { get; protected set; } = new List<RobotAction>();
    public CodeSettings Settings { get; protected set; } = new CodeSettings();
    public RobotActionForm NewAction { get; protected set; } = new RobotActionForm();

    [Inject] private IMarkdownService Markdown { get; init; } = default!;

    private Canvas2DContext? _context;
    private RobotRoutePrinter? _routePrinter;
    protected Blazor.Extensions.BECanvasComponent? _canvasReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _context = await _canvasReference.CreateCanvas2DAsync();
        _routePrinter = new RobotRoutePrinter(_context);
        await _routePrinter.Initialize();
    }


    protected void AddAction()
    {
        RobotAction? newAction = NewAction.Type switch
        {
            ActionType.GoForward => new RobotGoAction { Distance = NewAction.Distance },
            ActionType.GoBackward => new RobotGoAction { Distance = -NewAction.Distance },
            ActionType.TurnLeft => new RobotTurnAction { Angle = -NewAction.Angle },
            ActionType.TurnRight => new RobotTurnAction { Angle = NewAction.Angle },
            ActionType.Wait => new RobotWaitAction { Duration = NewAction.Duration },
            _ => null
        };

        if (newAction != null)
        {
            RobotActions.Add(newAction);
        }
    }

    protected void GenerateCode()
    {

    }
}
